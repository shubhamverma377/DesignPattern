/**
 *
 * Factory design pattern is used when we have a super class with multiple sub-classes and based on input,
 * we need to return one of the sub-class. This pattern take out the responsibility of instantiation of a
 * class from client program to the factory class.
 */

//Factory Design Pattern Super Class

/**
Super class in factory design pattern can be an interface, abstract class or a normal java class.
For our factory design pattern example, we have abstract super class with overridden toString()
method for testing purpose.
 */

package com.journaldev.design.model;

public abstract class Computer {

    public abstract String getRAM();
    public abstract String getHDD();
    public abstract String getCPU();

    @Override
    public String toString(){
        return "RAM= "+this.getRAM()+", HDD="+this.getHDD()+", CPU="+this.getCPU();
    }
}

/**
 * Factory Design Pattern Sub Classes
 *  we have two sub-classes PC and Server with below implementation.
 */
package com.journaldev.design.model;

public class PC extends Computer {

    private String ram;
    private String hdd;
    private String cpu;

    public PC(String ram, String hdd, String cpu){
        this.ram=ram;
        this.hdd=hdd;
        this.cpu=cpu;
    }
    @Override
    public String getRAM() {
        return this.ram;
    }

    @Override
    public String getHDD() {
        return this.hdd;
    }

    @Override
    public String getCPU() {
        return this.cpu;
    }

}

//we have another sub class Server

package com.journaldev.design.model;

public class Server extends Computer {

    private String ram;
    private String hdd;
    private String cpu;

    public Server(String ram, String hdd, String cpu){
        this.ram=ram;
        this.hdd=hdd;
        this.cpu=cpu;
    }
    @Override
    public String getRAM() {
        return this.ram;
    }

    @Override
    public String getHDD() {
        return this.hdd;
    }

    @Override
    public String getCPU() {
        return this.cpu;
    }

}

/**
 * we have super class and sub class Lets create Factory class
  */
package com.journaldev.design.factory;

import com.journaldev.design.model.Computer;
import com.journaldev.design.model.PC;
import com.journaldev.design.model.Server;

public class ComputerFactory {

    public static Computer getComputer(String type, String ram, String hdd, String cpu){
        if("PC".equalsIgnoreCase(type)) return new PC(ram, hdd, cpu);
        else if("Server".equalsIgnoreCase(type)) return new Server(ram, hdd, cpu);

        return null;
    }


/**
 *
 * Here is a simple test client program that uses above factory design pattern implementation.
 */

    package com.journaldev.design.test;

    import com.journaldev.design.factory.ComputerFactory;
    import com.journaldev.design.model.Computer;

    public class TestFactory {

        public static void main(String[] args) {
            Computer pc = ComputerFactory.getComputer("pc","2 GB","500 GB","2.4 GHz");
            Computer server = ComputerFactory.getComputer("server","16 GB","1 TB","2.9 GHz");
            System.out.println("Factory PC Config::"+pc);
            System.out.println("Factory Server Config::"+server);
        }

    }






